.. _stage-guide:

Ceed stages
===========

A Ceed :ref:`stage <stage-api>` uses its functions to control the intensity of its
shapes during an experiment.

A stage contains functions, shapes, and children stages. Each experiments runs a root
stage and this stage ticks through its functions and children stages. For every video
frame the current time is computed as the frame number multiplied by the period of
the video frame rate. This time is passed to the functions and sub-stages which
set their corresponding shapes for that frame from their functions' return value.

Creating stages
---------------

Ceed comes with a :ref:`pre-defined <stage-factory-plugin>` stage with various parameters,
but a :ref:`plugin <stage-plugin>` can create custom stage classes and add them to the
available stages list. Additionally, you can customize stages in the stage pane to make it
available for re-use in other stages or to be run directly.

This video shows multiple how to create a stage and name it, how to drag a sequence of
functions into it and how to drag a shape and shape group into it.

.. video:: ../media/guide/stage_create.webm

.. _preview-stage:

Previewing stage
----------------

Once we have a stage with functions and shapes, when run as an experiment Ceed will go
through these functions sequentially until each is done before moving to the next.
Meanwhile, for every frame, it applies the intensity from the current function for all
its shapes.

You can preview the exact temporal sequence of intensity that each shape will experience.

Select the stage to preview, the sampling rate (it should match the projector rate for
best accuracy, but it could take a while to pre-compute the entire stage) and refresh
to compute.

You can select which color channel (red, green, blue) to preview and zoom to specific
time intervals to see its intensity.

For example in this video, only the blue channel and only three shapes have intensity,
the others have zero intensity (black). The temporal pattern is a cosine ("Slow")
for 30 seconds followed by a constant intensity for a few seconds (the duration and
intensity is randomized by the function). Function's output are clipped to the 0-1
range.

.. video:: ../media/guide/stage_graph.webm

Modifying functions
-------------------

Rather than modifying the functions in the function pane, you can modify the
function directly in the stage. When originally adding the function, it uses a
reference to the original function following any changes to it. Pressing the T-fork
button will replace it with an editable function that is a copy of the referenced
function.

We can also set the stage to loop over its function sequence, e.g. 3 times in the
video.

.. video:: ../media/guide/stage_mod_function.webm

.. _preview-play-stage:

Running preview stage
---------------------

You can preview the frames of a stage by running it in the drawing area and it will
play the exact sequence of intensity for each shape as during a real experiment.

Select the stage name from the dropdown and then press the play button to preview.
Press stop to end it (or wait until it's done).

Notice the "experiment sampled" named stage that is created when running. This stage
is automatically created from the selected stage and is the stage that is run. It
contains all concrete values generated by the randomized parameters. See also
:ref:`logged-experiment`.

.. video:: ../media/guide/stage_run.webm

:download:`Ceed config of the video <../media/guide/stage_run.yml>`

Shape color
-----------

You can select the any of the three red, green, and blue color channels to be set
by the function intensity value. The other channels are kept at zero.

.. video:: ../media/guide/stage_run_other_color.webm

:download:`Ceed config of the video <../media/guide/stage_run_other_color.yml>`

Sub-stages
----------

To apply different temporal patterns to different shapes or shape groups, you can
add these shapes to different stages, and then place the stages into a single root
stage that runs them.

A stage applies its functions to its shapes. But, it can contain sub-stages
that will simultaneously apply their functions to their shapes. A shape contained
in multiple stages, the most deeply nested stage wins if both stages are active
simultaneously.

In this video, we create two sub-stages directly in the stage, one sets two shapes
to a cosine with frequency 2Hz, the other to sets its two shapes to a frequency of
1Hz. Additionally, one sets its shapes to cyan, the other to purple.

Initially, the two sub-stages will be run one after the other (**serially**) looping twice.
Then we set their order to run in **parallel**.

.. video:: ../media/guide/stage_parallel.webm

:download:`Ceed config of the video <../media/guide/stage_parallel.yml>`

.. _stage-donut:

Donut stage shapes
------------------

The color of a shape's internal area is uniformly set to its intensity value. To
create a donut-style shape, where some internal part is black, you could draw
the internal shape and create two sub-stages, each with their own function,
one a cosine and one constant with zero intensity etc.

A simpler way is to mark "keep dark" in the internal shape's stage settings.
Then the shape will be kept dark at all times.

.. video:: ../media/guide/stage_donut.webm

:download:`Ceed config of the video <../media/guide/stage_donut.yml>`

